<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Hack Mongo</title>
    <link>http://hackmongo.com/post/</link>
    <description>Recent content in Posts on Hack Mongo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 17 Sep 2017 00:00:00 +0000</lastBuildDate>

	<atom:link href="http://hackmongo.com/post/index.xml" rel="self" type="application/rss+xml" />


    <item>
      <title>Five-Point Checklist for Excellent Software</title>
      <link>http://hackmongo.com/post/five-point-checklist-for-excellent-software/</link>
      <pubDate>Sun, 17 Sep 2017 00:00:00 +0000</pubDate>

      <guid>http://hackmongo.com/post/five-point-checklist-for-excellent-software/</guid>
      <description>I&amp;rsquo;ve never met a developer who hasn&amp;rsquo;t read or reviewed a lot of code written by other developers. If there&amp;rsquo;s one truism in the field of software of engineering it&amp;rsquo;s that the process is collaborative. Unless you write and never release software, other people will read the code, and they&amp;rsquo;re most likely reading it not for a fun bedtime story but because they need to understand and probably fix or modify it.</description>
    </item>

    <item>
      <title>Designing Tools for Integration</title>
      <link>http://hackmongo.com/post/designing-tools-for-integration/</link>
      <pubDate>Tue, 05 Sep 2017 00:00:00 +0000</pubDate>

      <guid>http://hackmongo.com/post/designing-tools-for-integration/</guid>
      <description>When we write a new tool to do X, it&amp;rsquo;s common to program the tool to do X in one way. When X is trivial or very narrow in scope, this makes sense, and programming any more would fall prey to over-engineering. However, when the tool does many things (all logically related, else it falls prey to bloat and/or feature-creep), there quickly becomes many ways to accomplish those many things.</description>
    </item>

    <item>
      <title>How To Test the Database</title>
      <link>http://hackmongo.com/post/how-to-test-the-database/</link>
      <pubDate>Sun, 20 Aug 2017 11:20:00 -0700</pubDate>

      <guid>http://hackmongo.com/post/how-to-test-the-database/</guid>
      <description>&amp;ldquo;How do I test the database?&amp;rdquo; is a question I&amp;rsquo;ve been asked by colleagues many times. There&amp;rsquo;s a good, clean solution, but let&amp;rsquo;s first step back from what seems to be the problem to unpack why &amp;ldquo;testing the database&amp;rdquo; is not special (but nonetheless important). In other words: colleagues don&amp;rsquo;t ask, &amp;ldquo;How do I test such-and-such package?&amp;rdquo;, because that&amp;rsquo;s common and well understood. The question about testing the database implies that the database is a special beast that, if not treated properly, will devour the developer in their sleep.</description>
    </item>

    <item>
      <title>Design Before Implementation</title>
      <link>http://hackmongo.com/post/design-before-implementation/</link>
      <pubDate>Tue, 01 Aug 2017 00:00:00 +0000</pubDate>

      <guid>http://hackmongo.com/post/design-before-implementation/</guid>
      <description>Like most software engineers, I review my colleagues&amp;rsquo; code. I rarely provide feedback on implementation details because developers rarely choose obviously bad implementations. I focus my attention on design rather than implementation for one simple reason: implementation details are easy to change when software is well designed. Or, from the business perspective, design is the most costly aspect of software to change, so I review for great and therefore cost-effective design.</description>
    </item>

    <item>
      <title>Reading os/exec.Cmd Output Without Race Conditions</title>
      <link>http://hackmongo.com/post/reading-os-exec-cmd-output-without-race-conditions/</link>
      <pubDate>Sat, 17 Jun 2017 00:00:00 +0000</pubDate>

      <guid>http://hackmongo.com/post/reading-os-exec-cmd-output-without-race-conditions/</guid>
      <description>Golang Weekly issue 164 features a nice article, Advanced command execution in Go with os/exec, which details several ways of working with os/exec, especially how to read STDOUT and STDERR while the command is running. This common task is commonly done wrong, where &amp;ldquo;wrong&amp;rdquo; means &amp;ldquo;the code has a race condition&amp;rdquo;. This blog post shows how to read STDOUT and STDERR from an os/exec.Cmd while it&amp;rsquo;s running and without race conditions.</description>
    </item>

    <item>
      <title>Custom MongoDB Replica Set Write Concern</title>
      <link>http://hackmongo.com/post/custom-mongodb-replica-set-write-concern/</link>
      <pubDate>Sun, 11 Jun 2017 00:00:00 +0000</pubDate>

      <guid>http://hackmongo.com/post/custom-mongodb-replica-set-write-concern/</guid>
      <description>One of the great things about MongoDB is write concern:
 Write concern describes the level of acknowledgement requested from MongoDB for write operations to a standalone mongod or to replica sets or to sharded clusters.
 Awesome! I want 1 write ack from any secondary in the primary DC so when the primary crashes we&amp;rsquo;re guaranteed to have an up-to-date secondary in the primary DC ready to be elected primary.</description>
    </item>

  </channel>
</rss>
