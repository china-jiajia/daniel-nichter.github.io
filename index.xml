<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Hack Mongo</title>
    <link>http://hackmongo.com/</link>
    <description>Recent content on Hack Mongo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 23 Jan 2018 18:40:00 -0700</lastBuildDate>

	<atom:link href="http://hackmongo.com/index.xml" rel="self" type="application/rss+xml" />


    <item>
      <title>Crash-safe MySQL Replication</title>
      <link>http://hackmongo.com/post/crash-safe-mysql-replication-a-visual-guide/</link>
      <pubDate>Tue, 23 Jan 2018 18:40:00 -0700</pubDate>

      <guid>http://hackmongo.com/post/crash-safe-mysql-replication-a-visual-guide/</guid>
      <description>MySQL crash-safe replication is an old feature (~4 years as of MySQL 5.6), but it&amp;rsquo;s not consistently understood or applied. The MySQL manual on the topic, 16.3.2 Handling an Unexpected Halt of a Replication Slave, is correct and authoritative, but unless you grok MySQL replication that page doesn&amp;rsquo;t make it obvious why crash-safe replication works. Other blog posts explain why, but sometimes add other considerations, making it unclear which settings are necessary and sufficient.</description>
    </item>

    <item>
      <title>Command-line Interface Antipatterns</title>
      <link>http://hackmongo.com/page/cli-antipatterns/</link>
      <pubDate>Sun, 21 Jan 2018 19:00:00 -0700</pubDate>

      <guid>http://hackmongo.com/page/cli-antipatterns/</guid>
      <description>Command-line Interface Antipatterns Apps (web, mobile, and native) and APIs do not lessen the need or importance of command-line tools. A beautifully designed command-line user experience is arguably more important and than a graphical UX because the command line is deceptively simple: text on a screen. Wielding mere text on screen is an art akin to wielding mere paint on canvas. This page documents what I believe to be command-line interface (CLI) antipatterns which, in the long or short run, detract from both UX and developer effectiveness.</description>
    </item>

    <item>
      <title>MongoDB Bulk Insert Error Handling</title>
      <link>http://hackmongo.com/mongodb-bulk-insert-error-handling/</link>
      <pubDate>Sat, 06 Jan 2018 00:00:00 +0000</pubDate>

      <guid>http://hackmongo.com/mongodb-bulk-insert-error-handling/</guid>
      <description>Half a year ago, I reported a MongoDB server bug: SERVER-29861. Yesterday, we effectively finally closed it. First, my thanks to Asya and the MongoDB dev team for the thorough discussion and exploration of this issue, which was ultimately concluded not to be a bug. I&amp;rsquo;m glad to see MongoDB dig deep until the issue reaches bottom. As someone who formerly maintained a large, widely used open-source project for several years, I know how difficult this can be.</description>
    </item>

    <item>
      <title>Tech Workers Are Good People</title>
      <link>http://hackmongo.com/post/tech-workers-are-good-people/</link>
      <pubDate>Sun, 31 Dec 2017 09:50:00 -0700</pubDate>

      <guid>http://hackmongo.com/post/tech-workers-are-good-people/</guid>
      <description>The Other Tech Bubble is a provocative and interesting read. The author clearly has a lot of experience with Silicon Valley and has done their homework. There are many good insights, like &amp;ldquo;They&amp;rsquo;re still asking if it&amp;rsquo;s possible to do something, and not whether they should.&amp;rdquo; But there are two claims and one ambiguity that need to be addressed.
Villains The first claim is:
 In 2008, it was Wall Street bankers.</description>
    </item>

    <item>
      <title>Approaching a New Software Project</title>
      <link>http://hackmongo.com/post/approaching-a-new-software-project/</link>
      <pubDate>Sun, 10 Dec 2017 00:00:00 +0000</pubDate>

      <guid>http://hackmongo.com/post/approaching-a-new-software-project/</guid>
      <description>Approaching a new software project is difficult for two reasons. First, there&amp;rsquo;s no &amp;ldquo;guiding star&amp;rdquo;, no objective starting point. The developer can begin from and proceed in many directions, which makes choosing difficult. They want to proceed in a good direction from the start, not wasting time or effort, but how can they make a good choice without a guide or the benefit of experience? Being forced to choose and move ahead, the choice is often made randomly rather than methodically.</description>
    </item>

    <item>
      <title>Ideas, Leaders, and Engineers</title>
      <link>http://hackmongo.com/post/ideas-leaders-and-engineers/</link>
      <pubDate>Sun, 12 Nov 2017 00:00:00 +0000</pubDate>

      <guid>http://hackmongo.com/post/ideas-leaders-and-engineers/</guid>
      <description>The Senior Engineer&amp;rsquo;s Guide to Helping Others Make Decisions is a good read and good advice. I would summarize the advice as:
 &amp;ldquo;Seek first to understand, then to be understood&amp;rdquo; (Dr. Stephen Covey) Lead and guide, don&amp;rsquo;t micromanage Embrace change, which entails embracing other people&amp;rsquo;s thinking and way of doing things  In the first dialog, the senior engineer fails those three points.
Av&amp;rsquo;s blog post made me think&amp;hellip;</description>
    </item>

    <item>
      <title>Five-Point Checklist for Excellent Software</title>
      <link>http://hackmongo.com/post/five-point-checklist-for-excellent-software/</link>
      <pubDate>Sun, 17 Sep 2017 00:00:00 +0000</pubDate>

      <guid>http://hackmongo.com/post/five-point-checklist-for-excellent-software/</guid>
      <description>I&amp;rsquo;ve never met a developer who hasn&amp;rsquo;t read or reviewed a lot of code written by other developers. If there&amp;rsquo;s one truism in the field of software of engineering it&amp;rsquo;s that the process is collaborative. Unless you write and never release software, other people will read the code, and they&amp;rsquo;re most likely reading it not for a fun bedtime story but because they need to understand and probably fix or modify it.</description>
    </item>

    <item>
      <title>Designing Tools for Integration</title>
      <link>http://hackmongo.com/post/designing-tools-for-integration/</link>
      <pubDate>Tue, 05 Sep 2017 00:00:00 +0000</pubDate>

      <guid>http://hackmongo.com/post/designing-tools-for-integration/</guid>
      <description>When we write a new tool to do X, it&amp;rsquo;s common to program the tool to do X in one way. When X is trivial or very narrow in scope, this makes sense, and programming any more would fall prey to over-engineering. However, when the tool does many things (all logically related, else it falls prey to bloat and/or feature-creep), there quickly becomes many ways to accomplish those many things.</description>
    </item>

    <item>
      <title>How To Test the Database</title>
      <link>http://hackmongo.com/go-mysql-conn/</link>
      <pubDate>Sun, 20 Aug 2017 11:20:00 -0700</pubDate>

      <guid>http://hackmongo.com/go-mysql-conn/</guid>
      <description>Connector Interface The Connector interface abstracts away (hides) how MySQL connections are made and only returns sql.Conn (new in Go 1.9). Code that uses a connection (let&amp;rsquo;s call it &amp;ldquo;database code&amp;rdquo;) does not and should not know how to connect to the database. The &amp;ldquo;how&amp;rdquo; is an implementation detail that should be hidden from database code. Furthermore, programs usually run in multiple environments: local (laptop), CI, staging, and production. The &amp;ldquo;how&amp;rdquo; can be different in all environments, but the database code should not.</description>
    </item>

    <item>
      <title>How To Test the Database</title>
      <link>http://hackmongo.com/post/how-to-test-the-database/</link>
      <pubDate>Sun, 20 Aug 2017 11:20:00 -0700</pubDate>

      <guid>http://hackmongo.com/post/how-to-test-the-database/</guid>
      <description>&amp;ldquo;How do I test the database?&amp;rdquo; is a question I&amp;rsquo;ve been asked by colleagues many times. There&amp;rsquo;s a good, clean solution, but let&amp;rsquo;s first step back from what seems to be the problem to unpack why &amp;ldquo;testing the database&amp;rdquo; is not special (but nonetheless important). In other words: colleagues don&amp;rsquo;t ask, &amp;ldquo;How do I test such-and-such package?&amp;rdquo;, because that&amp;rsquo;s common and well understood. The question about testing the database implies that the database is a special beast that, if not treated properly, will devour the developer in their sleep.</description>
    </item>

    <item>
      <title>Design Before Implementation</title>
      <link>http://hackmongo.com/post/design-before-implementation/</link>
      <pubDate>Tue, 01 Aug 2017 00:00:00 +0000</pubDate>

      <guid>http://hackmongo.com/post/design-before-implementation/</guid>
      <description>Like most software engineers, I review my colleagues&amp;rsquo; code. I rarely provide feedback on implementation details because developers rarely choose obviously bad implementations. I focus my attention on design rather than implementation for one simple reason: implementation details are easy to change when software is well designed. Or, from the business perspective, design is the most costly aspect of software to change, so I review for great and therefore cost-effective design.</description>
    </item>

    <item>
      <title>Reading os/exec.Cmd Output Without Race Conditions</title>
      <link>http://hackmongo.com/post/reading-os-exec-cmd-output-without-race-conditions/</link>
      <pubDate>Sat, 17 Jun 2017 00:00:00 +0000</pubDate>

      <guid>http://hackmongo.com/post/reading-os-exec-cmd-output-without-race-conditions/</guid>
      <description>Golang Weekly issue 164 features a nice article, Advanced command execution in Go with os/exec, which details several ways of working with os/exec, especially how to read STDOUT and STDERR while the command is running. This common task is commonly done wrong, where &amp;ldquo;wrong&amp;rdquo; means &amp;ldquo;the code has a race condition&amp;rdquo;. This blog post shows how to read STDOUT and STDERR from an os/exec.Cmd while it&amp;rsquo;s running and without race conditions.</description>
    </item>

    <item>
      <title>Custom MongoDB Replica Set Write Concern</title>
      <link>http://hackmongo.com/post/custom-mongodb-replica-set-write-concern/</link>
      <pubDate>Sun, 11 Jun 2017 00:00:00 +0000</pubDate>

      <guid>http://hackmongo.com/post/custom-mongodb-replica-set-write-concern/</guid>
      <description>One of the great things about MongoDB is write concern:
 Write concern describes the level of acknowledgement requested from MongoDB for write operations to a standalone mongod or to replica sets or to sharded clusters.
 Awesome! I want 1 write ack from any secondary in the primary DC so when the primary crashes we&amp;rsquo;re guaranteed to have an up-to-date secondary in the primary DC ready to be elected primary.</description>
    </item>

    <item>
      <title>Go Antipatterns</title>
      <link>http://hackmongo.com/page/golang-antipatterns/</link>
      <pubDate>Sat, 03 Jun 2017 18:51:14 -0700</pubDate>

      <guid>http://hackmongo.com/page/golang-antipatterns/</guid>
      <description>Go Antipatterns These Go lang antipatterns are inspired by SQL Antipatterns. Antipattern Go code is syntactically correct, but there&amp;rsquo;s a better way that&amp;rsquo;s both functionally equivalent and idiomatic.
These are guidelines not absolutes. For example, Generic Package is common in practice and often difficult to avoid. Spending significant time trying to rename a util package can quickly amount to bikeshedding. Therefore, an Importance is listed for each antipattern:
   Importance Guideline     low Easy to make better later, so it can wait   medium Becomes more difficult to change the longer it remains, so make it better as soon as possible   high Make it better right now because it reflects and effects deep technical choices that are difficult to change later    All examples are from real code but anonymized and simplified.</description>
    </item>

    <item>
      <title>Idiomatic Go</title>
      <link>http://hackmongo.com/page/idiomatic-go/</link>
      <pubDate>Sat, 03 Jun 2017 00:00:00 +0000</pubDate>

      <guid>http://hackmongo.com/page/idiomatic-go/</guid>
      <description> Idiomatic Go Canon can·on&amp;nbsp;&amp;nbsp;/ˈkanən/&amp;nbsp;&amp;nbsp;noun : a general law, rule, principle, or criterion by which something is judged
These texts explicitly and implicitly define idiomatic Go code. Read, memorize, and refer to them often. Use them to settle debates.
 Effective Go Golang FAQ Go at Google: Language Design in the Service of Software Engineering Go Standard Library Packages Godoc: documenting Go code Go Package Names  Recommended  Go Code Review Comments Best practices for a new Go developer Reducing Type Hierarchies  </description>
    </item>

    <item>
      <title>About</title>
      <link>http://hackmongo.com/page/about/</link>
      <pubDate>Mon, 29 May 2017 00:00:00 +0000</pubDate>

      <guid>http://hackmongo.com/page/about/</guid>
      <description>Hack Mongo Hack Mongo is my personal blog about databases, the Go programming language, and software design. The name is a reference to Hack MySQL, another site/blog I maintained for ten years (2005-2015) while building a career with MySQL. Today, the new frontier is MongoDB, hence the new name: Hack Mongo.
The content of this site is inspired by two things. First is my job: I work at Square. Working with thousands of databases, hundreds of microservices, and engineers across the company, I&amp;rsquo;m fortunate to always have new challenges and opportunities to both learn and mentor.</description>
    </item>

  </channel>
</rss>
