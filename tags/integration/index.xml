<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Integration on Hack Mongo</title>
    <link>https://hackmongo.com/tags/integration/</link>
    <description>Recent content in Integration on Hack Mongo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 05 Sep 2017 00:00:00 +0000</lastBuildDate>

	<atom:link href="https://hackmongo.com/tags/integration/index.xml" rel="self" type="application/rss+xml" />


    <item>
      <title>Designing Tools for Integration</title>
      <link>https://hackmongo.com/post/designing-tools-for-integration/</link>
      <pubDate>Tue, 05 Sep 2017 00:00:00 +0000</pubDate>

      <guid>https://hackmongo.com/post/designing-tools-for-integration/</guid>
      <description>When we write a new tool to do X, it&amp;rsquo;s common to program the tool to do X in one way. When X is trivial or very narrow in scope, this makes sense, and programming any more would fall prey to over-engineering. However, when the tool does many things (all logically related, else it falls prey to bloat and/or feature-creep), there quickly becomes many ways to accomplish those many things.</description>
    </item>

  </channel>
</rss>
